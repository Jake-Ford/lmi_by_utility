# nm_data$full_address <- paste(nm_data$Address, nm_data$`Address 2`, sep = ", ")
#
# # Use geocode() to get latitude and longitude for each address
# geocoded_data <- geocode(nm_data$full_address)
#
# # Add latitude and longitude columns to the original dataframe
# nm_data$Latitude <- geocoded_data$lat
# nm_data$Longitude <- geocoded_data$lon
#
# nm_data <- nm_data %>%
#   filter(!is.na(Longitude))
#
# nm_data <- st_as_sf(nm_data, coords = c("Longitude", "Latitude"), crs = st_crs(nm_blocks))
# st_write(nm_data, "nm_public_housing.shp")
nm_public_housing <- st_read("nm_public_housing.shp")
library(leaflet.extras)
map %>%
addMarkers(data=nm_public_housing,
group="Public Housing",
#   color="black",
#   radius=2,
popup=paste("Name: ", nm_public_housing$Name)) %>%
addLayersControl(
overlayGroups=c("80% AMI Percent", "80% AMI Count", "Utility Zone", "SNAP", "Medicaid", "Public Housing"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
)
hideGroup("80% AMI Percent") %>% hideGroup("SNAP") %>% hideGroup("80% AMI Count") %>% hideGroup("Medicaid")
# nm_data <- read_excel("nm_public_housing.xlsx")
#
# register_google( key='AIzaSyAoldbWBmW88JZSqiNDW4cKDgIbHI_umco')
#
# library(ggmap)
#
# # Assuming your 'nm_data' dataframe has columns 'Address' and 'Address 2'
# # Create a new column to store the full address (combining Address and Address 2)
# nm_data$full_address <- paste(nm_data$Address, nm_data$`Address 2`, sep = ", ")
#
# # Use geocode() to get latitude and longitude for each address
# geocoded_data <- geocode(nm_data$full_address)
#
# # Add latitude and longitude columns to the original dataframe
# nm_data$Latitude <- geocoded_data$lat
# nm_data$Longitude <- geocoded_data$lon
#
# nm_data <- nm_data %>%
#   filter(!is.na(Longitude))
#
# nm_data <- st_as_sf(nm_data, coords = c("Longitude", "Latitude"), crs = st_crs(nm_blocks))
# st_write(nm_data, "nm_public_housing.shp")
nm_public_housing <- st_read("nm_public_housing.shp")
library(leaflet.extras)
map %>%
addMarkers(data=nm_public_housing,
group="Public Housing",
#   color="black",
#   radius=2,
popup=paste("Name: ", nm_public_housing$Name)) %>%
addLayersControl(
overlayGroups=c("80% AMI Percent", "80% AMI Count", "Utility Zone", "SNAP", "Medicaid", "Public Housing"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("80% AMI Percent") %>% hideGroup("SNAP") %>% hideGroup("80% AMI Count") %>% hideGroup("Medicaid")
st_crs(nm_public_housing)
nm_public_housing_buffer <- st_buffer(nm_public_housing, dist = 5 * 1609.34) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
# Step 3: Calculate the total population within the intersecting census tracts
population_within_5_miles <- sum(intersecting_tracts$medicaid_pop)
# Step 4: Calculate the total population in all census tracts
total_population <- sum(total_nm_tracts$medicaid_pop)
# Step 5: Compute the proportion of the total population within 5 miles of the public housing points
proportion_within_5_miles <- population_within_5_miles / total_population
proportion_within_5_miles
population_within_5_miles
map %>%
addMarkers(data=nm_public_housing,
group="Public Housing",
#   color="black",
#   radius=2,
popup=paste("Name: ", nm_public_housing$Name)) %>%
addCircleMarkers(data=nm_public_housing_buffer,
group="Public Housing Bufferred",
#   color="black",
#   radius=2,
popup=paste("Name: ", nm_public_housing_buffer$Name)) %>%
addLayersControl(
overlayGroups=c("80% AMI Percent", "80% AMI Count", "Utility Zone", "SNAP", "Medicaid", "Public Housing"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("80% AMI Percent") %>% hideGroup("SNAP") %>% hideGroup("80% AMI Count") %>% hideGroup("Medicaid")
nm_public_housing_buffer <- st_as_sf(nm_public_housing_buffer, st_crs(nm_public_housing))
leaflet() %>%
addCircles(data=nm_public_housing_buffer)
leaflet() %>%
addCircles(nm_public_housing_buffer)
leaflet() %>%
addPolygons(nm_public_housing_buffer)
leaflet() %>%
addTiles(nm_public_housing_buffer)
st_crs(nm_public_housing_buffer)
st_crs(nm_public_housing)
# nm_data <- read_excel("nm_public_housing.xlsx")
#
# register_google( key='AIzaSyAoldbWBmW88JZSqiNDW4cKDgIbHI_umco')
#
# library(ggmap)
#
# # Assuming your 'nm_data' dataframe has columns 'Address' and 'Address 2'
# # Create a new column to store the full address (combining Address and Address 2)
# nm_data$full_address <- paste(nm_data$Address, nm_data$`Address 2`, sep = ", ")
#
# # Use geocode() to get latitude and longitude for each address
# geocoded_data <- geocode(nm_data$full_address)
#
# # Add latitude and longitude columns to the original dataframe
# nm_data$Latitude <- geocoded_data$lat
# nm_data$Longitude <- geocoded_data$lon
#
# nm_data <- nm_data %>%
#   filter(!is.na(Longitude))
#
# nm_data <- st_as_sf(nm_data, coords = c("Longitude", "Latitude"), crs = st_crs(nm_blocks))
# st_write(nm_data, "nm_public_housing.shp")
nm_public_housing <- st_read("nm_public_housing.shp")
library(leaflet.extras)
nm_public_housing_buffer <- st_buffer(nm_public_housing, dist = 5 * 1609.34) # 1 mile = 1609.34 meters
nm_public_housing_buffer <- st_as_sf(nm_public_housing_buffer, st_crs(nm_public_housing))
nm_public_housing_buffer <- unnest(nm_public_housing_buffer)
map %>%
addMarkers(data=nm_public_housing,
group="Public Housing",
#   color="black",
#   radius=2,
popup=paste("Name: ", nm_public_housing$Name)) %>%
addCircleMarkers(data=nm_public_housing_buffer,
group="Public Housing Bufferred",
#   color="black",
#   radius=2,
popup=paste("Name: ", nm_public_housing_buffer$Name)) %>%
addLayersControl(
overlayGroups=c("80% AMI Percent", "80% AMI Count", "Utility Zone", "SNAP", "Medicaid", "Public Housing"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("80% AMI Percent") %>% hideGroup("SNAP") %>% hideGroup("80% AMI Count") %>% hideGroup("Medicaid")
# nm_data <- read_excel("nm_public_housing.xlsx")
#
# register_google( key='AIzaSyAoldbWBmW88JZSqiNDW4cKDgIbHI_umco')
#
# library(ggmap)
#
# # Assuming your 'nm_data' dataframe has columns 'Address' and 'Address 2'
# # Create a new column to store the full address (combining Address and Address 2)
# nm_data$full_address <- paste(nm_data$Address, nm_data$`Address 2`, sep = ", ")
#
# # Use geocode() to get latitude and longitude for each address
# geocoded_data <- geocode(nm_data$full_address)
#
# # Add latitude and longitude columns to the original dataframe
# nm_data$Latitude <- geocoded_data$lat
# nm_data$Longitude <- geocoded_data$lon
#
# nm_data <- nm_data %>%
#   filter(!is.na(Longitude))
#
# nm_data <- st_as_sf(nm_data, coords = c("Longitude", "Latitude"), crs = st_crs(nm_blocks))
# st_write(nm_data, "nm_public_housing.shp")
nm_public_housing <- st_read("nm_public_housing.shp")
library(leaflet.extras)
map %>%
addMarkers(data=nm_public_housing,
group="Public Housing",
#   color="black",
#   radius=2,
popup=paste("Name: ", nm_public_housing$Name)) %>%
addLayersControl(
overlayGroups=c("80% AMI Percent", "80% AMI Count", "Utility Zone", "SNAP", "Medicaid", "Public Housing"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("80% AMI Percent") %>% hideGroup("SNAP") %>% hideGroup("80% AMI Count") %>% hideGroup("Medicaid")
total_population <- sum(total_nm_tracts$medicaid_pop)
total_population
sum(total_nm_tracts$medicaid_pop)
nm_pub_in_util <- nm_public_housing %>%
st_point_on_surface() %>%
st_join(temp_util %>% select(util_name = NAME)) %>%
filter(!is.na(util_name))
# nm_data <- read_excel("nm_public_housing.xlsx")
#
# register_google( key='AIzaSyAoldbWBmW88JZSqiNDW4cKDgIbHI_umco')
#
# library(ggmap)
#
# # Assuming your 'nm_data' dataframe has columns 'Address' and 'Address 2'
# # Create a new column to store the full address (combining Address and Address 2)
# nm_data$full_address <- paste(nm_data$Address, nm_data$`Address 2`, sep = ", ")
#
# # Use geocode() to get latitude and longitude for each address
# geocoded_data <- geocode(nm_data$full_address)
#
# # Add latitude and longitude columns to the original dataframe
# nm_data$Latitude <- geocoded_data$lat
# nm_data$Longitude <- geocoded_data$lon
#
# nm_data <- nm_data %>%
#   filter(!is.na(Longitude))
#
# nm_data <- st_as_sf(nm_data, coords = c("Longitude", "Latitude"), crs = st_crs(nm_blocks))
# st_write(nm_data, "nm_public_housing.shp")
nm_public_housing <- st_read("nm_public_housing.shp")
library(leaflet.extras)
nm_pub_in_util <- nm_public_housing %>%
st_point_on_surface() %>%
st_join(temp_util %>% select(util_name = NAME)) %>%
filter(!is.na(util_name))
map %>%
addMarkers(data=nm_public_housing,
group="Public Housing",
#   color="black",
#   radius=2,
popup=paste("Name: ", nm_public_housing$Name)) %>%
addMarkers(data = nm_pub_in_util,
group="Public Housing in Utility Zones",
color="red",
popup=paste("Name: ", nm_pub_in_util$util_name)) %>%
addLayersControl(
overlayGroups=c("80% AMI Percent", "80% AMI Count", "Utility Zone", "SNAP", "Medicaid", "Public Housing", "Public Housing in Utility Zones"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("80% AMI Percent") %>% hideGroup("SNAP") %>% hideGroup("80% AMI Count") %>% hideGroup("Medicaid") %>% hideGroup("Public Housing in Utility Zones")
# nm_data <- read_excel("nm_public_housing.xlsx")
#
# register_google( key='AIzaSyAoldbWBmW88JZSqiNDW4cKDgIbHI_umco')
#
# library(ggmap)
#
# # Assuming your 'nm_data' dataframe has columns 'Address' and 'Address 2'
# # Create a new column to store the full address (combining Address and Address 2)
# nm_data$full_address <- paste(nm_data$Address, nm_data$`Address 2`, sep = ", ")
#
# # Use geocode() to get latitude and longitude for each address
# geocoded_data <- geocode(nm_data$full_address)
#
# # Add latitude and longitude columns to the original dataframe
# nm_data$Latitude <- geocoded_data$lat
# nm_data$Longitude <- geocoded_data$lon
#
# nm_data <- nm_data %>%
#   filter(!is.na(Longitude))
#
# nm_data <- st_as_sf(nm_data, coords = c("Longitude", "Latitude"), crs = st_crs(nm_blocks))
# st_write(nm_data, "nm_public_housing.shp")
nm_public_housing <- st_read("nm_public_housing.shp")
library(leaflet.extras)
nm_pub_in_util <- nm_public_housing %>%
st_point_on_surface() %>%
st_join(temp_util %>% select(util_name = NAME)) %>%
filter(!is.na(util_name))
map %>%
addMarkers(data=nm_public_housing,
group="Public Housing",
#   color="black",
#   radius=2,
popup=paste("Name: ", nm_public_housing$Name)) %>%
addMarkers(data = nm_pub_in_util,
group="Public Housing in Utility Zones",
#  color="red",
popup=paste("Name: ", nm_pub_in_util$util_name)) %>%
addLayersControl(
overlayGroups=c("80% AMI Percent", "80% AMI Count", "Utility Zone", "SNAP", "Medicaid", "Public Housing", "Public Housing in Utility Zones"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("80% AMI Percent") %>% hideGroup("SNAP") %>% hideGroup("80% AMI Count") %>% hideGroup("Medicaid") %>% hideGroup("Public Housing in Utility Zones")
# Assuming 'total_nm_tracts' and 'nm_public_housing' are the sf dataframes with 'pop' column representing population counts
# Step 1: Calculate the 5-mile buffer around each public housing point
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 5 * 1609.34) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
# Step 3: Calculate the total population within the intersecting census tracts
population_within_5_miles <- sum(intersecting_tracts$medicaid_pop)
# Step 4: Calculate the total population in all census tracts
total_population <- sum(total_nm_tracts$medicaid_pop)
# Step 5: Compute the proportion of the total population within 5 miles of the public housing points
proportion_within_5_miles <- population_within_5_miles / total_population
proportion_within_5_miles
population_within_5_miles
st_crs(nm_pub_in_util)
total_population
?st_buffer
# Assuming 'total_nm_tracts' and 'nm_public_housing' are the sf dataframes with 'pop' column representing population counts
# Step 1: Calculate the 5-mile buffer around each public housing point
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 5) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
# Step 3: Calculate the total population within the intersecting census tracts
population_within_5_miles <- sum(intersecting_tracts$medicaid_pop)
# Step 4: Calculate the total population in all census tracts
total_population <- sum(total_nm_tracts$medicaid_pop)
# Step 5: Compute the proportion of the total population within 5 miles of the public housing points
proportion_within_5_miles <- population_within_5_miles / total_population
population_within_5_miles
total_population
proportion_within_5_miles
total_df <- data.frame(Measure = c("Medicaid", "SNAP", "80% AMI"))
total_df
total_df <- data.frame(Measure = c("Medicaid", "SNAP", "80% AMI"),
'Five Mile Buffer' = NA)
total_df
total_df <- data.frame(Measure = c("Medicaid", "SNAP", "80% AMI"),
`Five Mile Buffer` = NA)
total_df
total_df <- data.frame(Measure = c("Medicaid", "SNAP", "80% AMI"),
`Five Mile Buffer` = c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80))
total_df
total_df <- data.frame(Measure = c("Medicaid", "SNAP", "80% AMI"),
`Five Mile Buffer` = c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80)))
total_df
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 1) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
# Step 3: Calculate the total population within the intersecting census tracts
population_within_5_miles_medicaid <- sum(intersecting_tracts$medicaid_pop)
population_within_5_miles_medicaid <- sum(intersecting_tracts$medicaid_pop)
population_within_5_miles_medicaid <- sum(intersecting_tracts$medicaid_pop)
# Step 4: Calculate the total population in all census tracts
total_population <- sum(total_nm_tracts$medicaid_pop)
# Step 5: Compute the proportion of the total population within 5 miles of the public housing points
proportion_within_5_miles <- population_within_5_miles / total_population
total_df <- data.frame(Measure = c("Medicaid", "SNAP", "80% AMI"),
Buffer_1 = c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80)))
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 5) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
# Step 3: Calculate the total population within the intersecting census tracts
population_within_5_miles_medicaid <- sum(intersecting_tracts$medicaid_pop)
population_within_5_miles_medicaid <- sum(intersecting_tracts$medicaid_pop)
population_within_5_miles_medicaid <- sum(intersecting_tracts$medicaid_pop)
# Step 4: Calculate the total population in all census tracts
total_population <- sum(total_nm_tracts$medicaid_pop)
# Step 5: Compute the proportion of the total population within 5 miles of the public housing points
proportion_within_5_miles <- population_within_5_miles / total_population
total_df$Buffer_5 <- c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80))
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 10) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
# Step 3: Calculate the total population within the intersecting census tracts
population_within_5_miles_medicaid <- sum(intersecting_tracts$medicaid_pop)
population_within_5_miles_medicaid <- sum(intersecting_tracts$medicaid_pop)
population_within_5_miles_medicaid <- sum(intersecting_tracts$medicaid_pop)
# Step 4: Calculate the total population in all census tracts
total_population <- sum(total_nm_tracts$medicaid_pop)
# Step 5: Compute the proportion of the total population within 5 miles of the public housing points
proportion_within_5_miles <- population_within_5_miles / total_population
total_df$Buffer_10 <- c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80))
total_df
View(total_df)
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 100) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
total_df <- data.frame(Measure = c("Medicaid", "SNAP", "80% AMI"),
Buffer_1 = c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80)))
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 500) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
total_df$Buffer_5 <- c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80))
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 1000) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
total_df$Buffer_10 <- c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80))
View(total_df)
sum(nm_blocks$medicaid_pop)
datatable(temp, total_df = "New Mexico Distance from Public Housing and Selected Characteristics")%>%
formatCurrency(Buffer_1,currency = "", interval = 3, mark = ",") %>%
formatCurrency(Buffer_5,currency = "", interval = 3, mark = ",") %>%
formatCurrency(Buffer_10,currency = "", interval = 3, mark = ",")
datatable(total_df, caption = "New Mexico Distance from Public Housing and Selected Characteristics")%>%
formatCurrency(Buffer_1,currency = "", interval = 3, mark = ",") %>%
formatCurrency(Buffer_5,currency = "", interval = 3, mark = ",") %>%
formatCurrency(Buffer_10,currency = "", interval = 3, mark = ",")
View(total_df)
datatable(total_df, caption = "New Mexico Distance from Public Housing and Selected Characteristics")
datatable(total_df, caption = "New Mexico Distance from Public Housing and Selected Characteristics")%>%
formatCurrency('Buffer_1',currency = "", interval = 3, mark = ",")
datatable(total_df, caption = "New Mexico Distance from Public Housing and Selected Characteristics")%>%
formatCurrency('Buffer_1',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Buffer_5',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Buffer_10',currency = "", interval = 3, mark = ",")
sum(total_nm_tracts$medicaid_pop)
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 10) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
total_df <- data.frame(Measure = c("Medicaid", "SNAP", "80% AMI"),
Buffer_1 = c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80)))
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 50) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
total_df$Buffer_5 <- c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80))
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 100) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
total_df$Buffer_10 <- c(sum(intersecting_tracts$medicaid_pop), sum(intersecting_tracts$snap_hh), sum(intersecting_tracts$AMI_80))
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 10)
st_write(nm_public_housing_buffer, "public_housing_temp/nm_pub_in_util_buffered_10.shp")
st_write(nm_public_housing_buffer, "public_housing_temp/nm_pub_in_util_buffered_10.shp")
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 50) # 1 mile = 1609.34 meters
st_write(nm_public_housing_buffer, "public_housing_temp/nm_pub_in_util_buffered_50.shp")
st_write(nm_pub_in_util, "public_housing_temp/nm_pub_in_util.shp")
# Load the required packages
library(sf)
# Assuming 'total_nm_tracts' and 'nm_public_housing' are the sf dataframes with 'pop' column representing population counts
# Step 1: Calculate the 5-mile buffer around each public housing point
nm_public_housing_buffer <- st_buffer(nm_public_housing, dist = 5 * 1609.34) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
# Step 3: Combine the overlapping census tracts into a single polygon
union_tracts <- st_union(intersecting_tracts)
# Step 4: Calculate the total population within the union polygon (total area covered)
population_within_5_miles <- sum(union_tracts$pop)
# Step 5: Calculate the total population in all census tracts
total_population <- sum(total_nm_tracts$pop)
# Step 6: Compute the proportion of the total population within 5 miles of the public housing points
proportion_within_5_miles <- population_within_5_miles / total_population
total_population
sum(union_tracts$medicaid_pop)
View(union_tracts)
sum(union_tracts$medicaid_pop)
sum(total_nm_tracts$medicaid_pop)
# Load the required packages
library(sf)
# Assuming 'total_nm_tracts' and 'nm_public_housing' are the sf dataframes with 'medicaid_pop' column representing Medicaid population counts
# Step 1: Calculate the 5-mile buffer around each public housing point
nm_public_housing_buffer <- st_buffer(nm_public_housing, dist = 5 * 1609.34) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
# Step 3: Combine the overlapping census tracts into a single polygon
union_tracts <- st_union(intersecting_tracts)
# Step 4: Sum the 'medicaid_pop' attribute within the unioned polygon
population_within_5_miles <- sum(union_tracts$medicaid_pop)
# Step 5: Sum the 'medicaid_pop' attribute in all census tracts
total_medicaid_population <- sum(total_nm_tracts$medicaid_pop)
# Step 6: Compute the proportion of the 'medicaid_pop' within 5 miles of the public housing points
proportion_within_5_miles <- population_within_5_miles / total_medicaid_population
population_within_5_miles
st_crs(total_nm_tracts)
st_crs(nm_public_housing_buffer)
sum(intersecting_tracts$medicaid_pop)
# Load the required packages
library(sf)
# Assuming 'total_nm_tracts' and 'nm_public_housing' are the sf dataframes with 'medicaid_pop' column representing Medicaid population counts
# Create an empty vector to store the population within 5 miles for each public housing point
population_within_5_miles <- numeric()
# Step 1: Calculate the 5-mile buffer around each public housing point
nm_public_housing_buffer <- st_buffer(nm_public_housing, dist = 5 * 1609.34) # 1 mile = 1609.34 meters
# Step 2: Loop through each public housing point
for (i in seq_along(nm_public_housing)) {
# Identify census tracts that intersect with the 5-mile buffer around the current public housing point
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer[i, ])
# Sum the 'medicaid_pop' attribute for the intersecting census tracts and store the result
population_within_5_miles[i] <- sum(intersecting_tracts$medicaid_pop)
}
# Step 3: Calculate the total population within the 5-mile buffer for all public housing points
total_population_within_5_miles <- sum(population_within_5_miles)
# Step 4: Calculate the total population in all census tracts
total_medicaid_population <- sum(total_nm_tracts$medicaid_pop)
# Step 5: Compute the proportion of the 'medicaid_pop' within 5 miles of the public housing points
proportion_within_5_miles <- total_population_within_5_miles / total_medicaid_population
total_population_within_5_miles
total_medicaid_population
# Load the required packages
library(sf)
# Assuming 'total_nm_tracts' and 'nm_public_housing' are the sf dataframes with 'medicaid_pop' column representing Medicaid population counts
# Create an empty vector to store the population within 5 miles for each public housing point
population_within_5_miles <- numeric()
# Step 1: Calculate the 5-mile buffer around each public housing point
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 5 * 1609.34) # 1 mile = 1609.34 meters
# Step 2: Loop through each public housing point
for (i in seq_along(nm_pub_in_util)) {
# Identify census tracts that intersect with the 5-mile buffer around the current public housing point
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer[i, ])
# Sum the 'medicaid_pop' attribute for the intersecting census tracts and store the result
population_within_5_miles[i] <- sum(intersecting_tracts$medicaid_pop)
}
# Step 3: Calculate the total population within the 5-mile buffer for all public housing points
total_population_within_5_miles <- sum(population_within_5_miles)
print(total_population_within_5_miles)
# Step 4: Calculate the total population in all census tracts
total_medicaid_population <- sum(total_nm_tracts$medicaid_pop)
# Step 5: Compute the proportion of the 'medicaid_pop' within 5 miles of the public housing points
proportion_within_5_miles <- total_population_within_5_miles / total_medicaid_population
total_medicaid_population
# Load the required packages
library(sf)
# Assuming 'total_nm_tracts' and 'nm_public_housing' are the sf dataframes with 'medicaid_pop' column representing Medicaid population counts
# Step 1: Calculate the 5-mile buffer around each public housing point
nm_public_housing_buffer <- st_buffer(nm_public_housing, dist = 5 * 1609.34) # 1 mile = 1609.34 meters
# Step 2: Spatial join to calculate the population within the 5-mile buffer for each public housing point
nm_public_housing_with_population <- st_join(nm_public_housing_buffer, total_nm_tracts)
# Step 3: Calculate the total population within the 5-mile buffer for all public housing points
total_population_within_5_miles <- sum(nm_public_housing_with_population$medicaid_pop)
print(total_population_within_5_miles)
# Step 4: Calculate the total population in all census tracts
total_medicaid_population <- sum(total_nm_tracts$medicaid_pop)
# Step 5: Compute the proportion of the 'medicaid_pop' within 5 miles of the public housing points
proportion_within_5_miles <- total_population_within_5_miles / total_medicaid_population
proportion_within_5_miles
total_population_within_5_miles
total_medicaid_population
nm_public_housing_buffer <- st_buffer(nm_pub_in_util, dist = 10) # 1 mile = 1609.34 meters
# Step 2: Identify census tracts that intersect with the 5-mile buffer
intersecting_tracts <- st_intersection(total_nm_tracts, nm_public_housing_buffer)
plot(intersecting_tracts)
st_area(intersecting_tracts)
getwd()

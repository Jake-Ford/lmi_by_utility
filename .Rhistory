nm_public_housing_isos_30 <- st_transform(nm_public_housing_isos_30, st_crs(nm_public_housing))
library(leaflet.extras)
nm_pub_in_util <- nm_public_housing %>%
st_point_on_surface() %>%
st_join(temp_util %>% select(util_name = NAME)) %>%
filter(!is.na(util_name))
houses_in_utilies <- nm_pub_in_util$Name
iso_15 <- nm_public_housing_isos_15 %>%
filter(id %in% houses_in_utilies)
iso_30 <- nm_public_housing_isos_30 %>%
filter(id %in% houses_in_utilies)
map %>%
# addMarkers(data=nm_public_housing,
#                  group="Public Housing",
#               #   color="black",
#               #   radius=2,
#                  popup=paste("Name: ", nm_public_housing$Name)) %>%
addMarkers(data = nm_pub_in_util,
group="Public Housing",
#  color="red",
popup=paste("Name: ", nm_pub_in_util$util_name)) %>%
addPolygons(data =iso_15,
group = "15 Minute Driving",
fillOpacity = 0.2,
color = "orange") %>%
addPolygons(data =iso_30,
group = "30 Minute Driving",
fillOpacity = 0.2,
color = "darkgreen") %>%
addLayersControl(
overlayGroups=c("80% AMI", "Utility Zones", "SNAP", "Medicaid", "Public Housing", "15 Minute Driving", "30 Minute Driving"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("80% AMI Percent") %>% hideGroup("SNAP") %>% hideGroup("80% AMI") %>% hideGroup("Medicaid")
library(sf)
# Assuming 'snap' column is present in total_nm_tracts
# Check validity of isochrones
iso_15_valid <- st_is_valid(iso_15)
# Find indices of invalid isochrones
invalid_indices <- which(!iso_15_valid)
# Filter out invalid isochrones
valid_iso_15 <- iso_15[-invalid_indices, ]
total_nm_tracts$total_area_tract <- st_area(total_nm_tracts)
# Find the intersection of valid_iso_15 with total_nm_tracts
intersecting_tracts <- st_intersection(total_nm_tracts, valid_iso_15)
# Calculate the area of valid_iso_15 that covers each tract
intersecting_tracts$covered_area <- st_area(intersecting_tracts)
# Calculate the proportion of coverage for each tract
intersecting_tracts$proportion_coverage <- intersecting_tracts$covered_area / total_nm_tracts$total_area_tract
# If you want to consider the 'snap' column for calculating the proportion
# You can adjust the calculation based on your needs
intersecting_tracts$proportion_snap_coverage <- intersecting_tracts$proportion_coverage * intersecting_tracts$snap_hh
intersecting_tracts$proportion_medicaid_pop <- intersecting_tracts$proportion_coverage * intersecting_tracts$medicaid_pop
intersecting_tracts$proportion_80ami_coverage <- intersecting_tracts$proportion_coverage * intersecting_tracts$AMI_80
temp_15 <- intersecting_tracts %>%
st_drop_geometry() %>%
group_by(geoid) %>%
summarize(total_snap = max(snap_hh),
total_medicaid = max(medicaid_pop),
total_80ami = max(AMI_80),
covered_area = sum(proportion_coverage)) %>%
mutate(covered_prop =
case_when(
as.numeric(covered_area) >= 100 ~ 1,
TRUE ~ as.numeric(covered_area))
) %>%
mutate(
proportion_snap = covered_prop * total_snap/100,
proportion_medicaid = covered_prop * total_medicaid/100,
proportion_80ami = covered_prop * total_80ami/100,
isochrone = "15 Minute"
) %>%
group_by(isochrone) %>%
summarize(SNAP = sum(proportion_snap),
Medicaid = sum(proportion_medicaid),
LMI = sum(proportion_80ami))
temp_15
library(sf)
# Assuming 'snap' column is present in total_nm_tracts
# Check validity of isochrones
iso_30_valid <- st_is_valid(iso_30)
# Find indices of invalid isochrones
invalid_indices <- which(!iso_30_valid)
# Filter out invalid isochrones
valid_iso_30 <- iso_30[-invalid_indices, ]
total_nm_tracts$total_area_tract <- st_area(total_nm_tracts)
# Find the intersection of valid_iso_30 with total_nm_tracts
intersecting_tracts <- st_intersection(total_nm_tracts, iso_30)
# Calculate the area of valid_iso_30 that covers each tract
intersecting_tracts$covered_area <- st_area(intersecting_tracts)
# Calculate the proportion of coverage for each tract
intersecting_tracts$proportion_coverage <- intersecting_tracts$covered_area / total_nm_tracts$total_area_tract
# If you want to consider the 'snap' column for calculating the proportion
# You can adjust the calculation based on your needs
intersecting_tracts$proportion_snap_coverage <- intersecting_tracts$proportion_coverage * intersecting_tracts$snap_hh
intersecting_tracts$proportion_medicaid_pop <- intersecting_tracts$proportion_coverage * intersecting_tracts$medicaid_pop
intersecting_tracts$proportion_80ami_coverage <- intersecting_tracts$proportion_coverage * intersecting_tracts$AMI_80
temp_30 <- intersecting_tracts %>%
st_drop_geometry() %>%
group_by(geoid) %>%
summarize(total_snap = max(snap_hh),
total_medicaid = max(medicaid_pop),
total_80ami = max(AMI_80),
covered_area = sum(proportion_coverage)) %>%
mutate(covered_prop =
case_when(
as.numeric(covered_area) >= 100 ~ 1,
TRUE ~ as.numeric(covered_area))
) %>%
mutate(
proportion_snap = covered_prop * total_snap/100,
proportion_medicaid = covered_prop * total_medicaid/100,
proportion_80ami = covered_prop * total_80ami/100,
isochrone = "30 Minute"
) %>%
group_by(isochrone) %>%
summarize(SNAP = sum(proportion_snap),
Medicaid = sum(proportion_medicaid),
LMI = sum(proportion_80ami))
temp_30
temp <- rbind(temp_15, temp_30)
datatable(temp, caption = "New Mexico Distance from Public Housing and Selected Characteristics")%>%
formatCurrency('SNAP',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Medicaid',currency = "", interval = 3, mark = ",") %>%
formatCurrency('LMI',currency = "", interval = 3, mark = ",")
chas_df <- load_chas() %>%
mutate(State_Name = case_when(
state == 17 ~ "Illinois",
state == 25 ~ "Massachusetts",
state == 27 ~ "Minnesota",
state == 34 ~ "New Jersey",
state == 35 ~ "New Mexico",
state == 36 ~ "New York",
TRUE ~ "Other"
))
add_geo <- merge(chas_df, get_tracts)
add_geo <- st_as_sf(add_geo)
add_geo <- add_geo %>%
filter(State_Name=="New York")
library(sf)
library(leaflet)
temp_util <- st_read("state_util/ny_utils.shp") %>%
filter(grepl("NGRID|NYSEG|CHGE|RGE|ORU", comp_short))
temp_util <- st_zm(temp_util, drop = TRUE)
# Define your color palette and values
pal5 <- colorFactor(
palette="viridis",
domain=temp_util$comp_full
)
# Create the leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = temp_util,
group = "Utility Zones",
stroke = TRUE,
color = ~pal5(temp_util$comp_full),
dashArray = "3",
fillOpacity = 0.5,
popup = paste("Utility Zone: ", temp_util$comp_full)) %>%
addLegend(position = "bottomright",
pal = pal5,
values = temp_util$comp_full,
title = "Solstice NY Utilities")
ny_blocks <- get_acs(
geography="tract",
state="NY",
variables=c(#"snap_hh" = "B22001_002"
# "snap_pop" = "B19058_002",
# "medicaid_1" = "C27007_004",
# "medicaid_2" = "C27007_007",
# "medicaid_3" = "C27007_010",
# "medicaid_4" = "C27007_014",
# "medicaid_5" = "C27007_017",
# "medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2019,
geometry=TRUE) %>%
group_by(GEOID) %>%
summarize(
#snap_hh = estimate[variable=="snap_pop"],
#medicaid_pop =estimate[variable=="medicaid_1"] +
#             estimate[variable=="medicaid_2"] +
#            estimate[variable=="medicaid_3"] +
#           estimate[variable=="medicaid_4"] +
#          estimate[variable=="medicaid_5"] +
#         estimate[variable=="medicaid_6"] ,
total_pop = estimate[variable=="Total_Pop"])
total_ny_tracts <- cbind(add_geo, ny_blocks)
temp <- total_ny_tracts %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(comp_full)) %>%
st_drop_geometry() %>%
group_by(Name = comp_full) %>%
filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80),
#   `Medicaid` = sum(medicaid_pop),
# `SNAP` = sum(snap_hh),
`Total Population` = sum(total_pop)
) %>%
arrange(desc(`Pop under 80 AMI`))
datatable(temp, caption = "New York, Sources: ACS 2019 and HUD CHAS")%>%
formatCurrency('Pop under 80 AMI',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Total Population',currency = "", interval = 3, mark = ",")
dac_bgs <- st_read("state_util/Interim Disadvantaged Communities (DAC)_ 2020/geo_export_ae5e9c30-45bc-4888-87dd-681a41d761d8.shp")
mapview(dac_bgs)
temp <- ny_blocks %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(comp_full)) %>%
st_drop_geometry() %>%
group_by(Name = comp_full) %>%
filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80),
#   `Medicaid` = sum(medicaid_pop),
# `SNAP` = sum(snap_hh),
`Total Population` = sum(total_pop)
) %>%
arrange(desc(`Pop under 80 AMI`))
View(ny_blocks)
View(total_ny_tracts)
total_ny_tracts%>%
filter(AMI_120_Pct >= 0.8) %>%
mapview()
total_ny_tracts%>%
filter(AMI_80_Pct >= 0.8) %>%
mapview()
total_ny_tracts%>%
filter(AMI_80_Pct >= 0.5) %>%
mapview()
total_ny_tracts%>%
filter(AMI_120_Pct >= 0.5) %>%
mapview()
temp <- total_ny_tracts %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(comp_full)) %>%
st_drop_geometry() %>%
group_by(Name = comp_full) %>%
filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80),
#   `Medicaid` = sum(medicaid_pop),
# `SNAP` = sum(snap_hh),
`Total Population` = sum(total_pop)
) %>%
arrange(desc(`Pop under 80 AMI`))
datatable(temp, caption = "New York, Sources: ACS 2019 and HUD CHAS")%>%
formatCurrency('Pop under 80 AMI',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Total Population',currency = "", interval = 3, mark = ",")
temp <- total_ny_tracts %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(dac_bgs %>% select(pop_2018)) %>%
st_drop_geometry() %>%
group_by(Name = pop_2018) %>%
filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80),
#   `Medicaid` = sum(medicaid_pop),
# `SNAP` = sum(snap_hh),
`Total Population` = sum(total_pop)
) %>%
arrange(desc(`Pop under 80 AMI`))
dac_bgs <- st_read("state_util/Interim Disadvantaged Communities (DAC)_ 2020/geo_export_ae5e9c30-45bc-4888-87dd-681a41d761d8.shp")
dac_bgs <- st_transform(dac_bgs, st_crs(total_ny_tracts)) %>% st_make_valid()
temp <- total_ny_tracts %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(dac_bgs %>% select(pop_2018)) %>%
st_drop_geometry() %>%
group_by(Name = pop_2018) %>%
filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80),
#   `Medicaid` = sum(medicaid_pop),
# `SNAP` = sum(snap_hh),
`Total Population` = sum(total_pop)
) %>%
arrange(desc(`Pop under 80 AMI`))
datatable(temp, caption = "New York, Sources: ACS 2019 and HUD CHAS")%>%
formatCurrency('Pop under 80 AMI',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Total Population',currency = "", interval = 3, mark = ",")
temp <- total_ny_tracts %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(dac_bgs %>% select(pop_2018)) %>%
st_drop_geometry()
temp <- total_ny_tracts %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(dac_bgs %>% select(pop_2018)) %>%
st_drop_geometry() %>%
mutate(temp = 1) %>%
group_by(temp) %>%
#filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80),
#   `Medicaid` = sum(medicaid_pop),
# `SNAP` = sum(snap_hh),
`Total Population` = sum(total_pop)
) %>%
arrange(desc(`Pop under 80 AMI`))
datatable(temp, caption = "New York, Sources: ACS 2019 and HUD CHAS")%>%
formatCurrency('Pop under 80 AMI',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Total Population',currency = "", interval = 3, mark = ",")
View(dac_bgs)
View(dac_bgs)
View(ny_blocks)
ny_blocks <- get_acs(
geography="tract",
state="NY",
variables=c(#"snap_hh" = "B22001_002"
# "snap_pop" = "B19058_002",
# "medicaid_1" = "C27007_004",
# "medicaid_2" = "C27007_007",
# "medicaid_3" = "C27007_010",
# "medicaid_4" = "C27007_014",
# "medicaid_5" = "C27007_017",
# "medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2018,
geometry=TRUE) %>%
group_by(GEOID)
ny_blocks <- get_acs(
geography="block group",
state="NY",
variables=c(#"snap_hh" = "B22001_002"
# "snap_pop" = "B19058_002",
# "medicaid_1" = "C27007_004",
# "medicaid_2" = "C27007_007",
# "medicaid_3" = "C27007_010",
# "medicaid_4" = "C27007_014",
# "medicaid_5" = "C27007_017",
# "medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2018,
geometry=TRUE)
View(ny_blocks)
ny_blocks <- get_acs(
geography="block group",
state="NY",
variables=c(#"snap_hh" = "B22001_002"
# "snap_pop" = "B19058_002",
# "medicaid_1" = "C27007_004",
# "medicaid_2" = "C27007_007",
# "medicaid_3" = "C27007_010",
# "medicaid_4" = "C27007_014",
# "medicaid_5" = "C27007_017",
# "medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2018,
geometry=TRUE) %>%
group_by(GEOID) %>%
summarize(
#snap_hh = estimate[variable=="snap_pop"],
#medicaid_pop =estimate[variable=="medicaid_1"] +
#             estimate[variable=="medicaid_2"] +
#            estimate[variable=="medicaid_3"] +
#           estimate[variable=="medicaid_4"] +
#          estimate[variable=="medicaid_5"] +
#         estimate[variable=="medicaid_6"] ,
total_pop = estimate[variable=="Total_Pop"])
ny_tracts <- get_acs(
geography="Tract",
state="NY",
variables=c(#"snap_hh" = "B22001_002"
# "snap_pop" = "B19058_002",
# "medicaid_1" = "C27007_004",
# "medicaid_2" = "C27007_007",
# "medicaid_3" = "C27007_010",
# "medicaid_4" = "C27007_014",
# "medicaid_5" = "C27007_017",
# "medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2019,
geometry=TRUE) %>%
group_by(GEOID) %>%
summarize(
#snap_hh = estimate[variable=="snap_pop"],
#medicaid_pop =estimate[variable=="medicaid_1"] +
#             estimate[variable=="medicaid_2"] +
#            estimate[variable=="medicaid_3"] +
#           estimate[variable=="medicaid_4"] +
#          estimate[variable=="medicaid_5"] +
#         estimate[variable=="medicaid_6"] ,
total_pop = estimate[variable=="Total_Pop"])
ny_tracts <- get_acs(
geography="Tract",
state="NY",
variables=c(#"snap_hh" = "B22001_002"
# "snap_pop" = "B19058_002",
# "medicaid_1" = "C27007_004",
# "medicaid_2" = "C27007_007",
# "medicaid_3" = "C27007_010",
# "medicaid_4" = "C27007_014",
# "medicaid_5" = "C27007_017",
# "medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2019,
geometry=TRUE) %>%
group_by(GEOID) %>%
summarize(
#snap_hh = estimate[variable=="snap_pop"],
#medicaid_pop =estimate[variable=="medicaid_1"] +
#             estimate[variable=="medicaid_2"] +
#            estimate[variable=="medicaid_3"] +
#           estimate[variable=="medicaid_4"] +
#          estimate[variable=="medicaid_5"] +
#         estimate[variable=="medicaid_6"] ,
total_pop = estimate[variable=="Total_Pop"])
ny_tracts <- get_acs(
geography="Tract",
state="NY",
variables=c(#"snap_hh" = "B22001_002"
# "snap_pop" = "B19058_002",
# "medicaid_1" = "C27007_004",
# "medicaid_2" = "C27007_007",
# "medicaid_3" = "C27007_010",
# "medicaid_4" = "C27007_014",
# "medicaid_5" = "C27007_017",
# "medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2019,
geometry=TRUE)
ny_blocks <- get_acs(
geography="block group",
state="NY",
variables=c(#"snap_hh" = "B22001_002"
# "snap_pop" = "B19058_002",
# "medicaid_1" = "C27007_004",
# "medicaid_2" = "C27007_007",
# "medicaid_3" = "C27007_010",
# "medicaid_4" = "C27007_014",
# "medicaid_5" = "C27007_017",
# "medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2018,
geometry=TRUE) %>%
group_by(GEOID) %>%
summarize(
#snap_hh = estimate[variable=="snap_pop"],
#medicaid_pop =estimate[variable=="medicaid_1"] +
#             estimate[variable=="medicaid_2"] +
#            estimate[variable=="medicaid_3"] +
#           estimate[variable=="medicaid_4"] +
#          estimate[variable=="medicaid_5"] +
#         estimate[variable=="medicaid_6"] ,
total_pop = estimate[variable=="Total_Pop"])
ny_tracts <- get_acs(
geography="Tract",
state="NY",
variables=c(#"snap_hh" = "B22001_002"
# "snap_pop" = "B19058_002",
# "medicaid_1" = "C27007_004",
# "medicaid_2" = "C27007_007",
# "medicaid_3" = "C27007_010",
# "medicaid_4" = "C27007_014",
# "medicaid_5" = "C27007_017",
# "medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2019,
geometry=TRUE) %>%
group_by(GEOID) %>%
summarize(
#snap_hh = estimate[variable=="snap_pop"],
#medicaid_pop =estimate[variable=="medicaid_1"] +
#             estimate[variable=="medicaid_2"] +
#            estimate[variable=="medicaid_3"] +
#           estimate[variable=="medicaid_4"] +
#          estimate[variable=="medicaid_5"] +
#         estimate[variable=="medicaid_6"] ,
total_pop = estimate[variable=="Total_Pop"])
temp <- dac_bgs %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(comp_full)) %>%
st_drop_geometry() %>%
group_by(Name = comp_full) %>%
filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80)
) %>%
arrange(desc(`Pop under 80 AMI`))
temp <- dac_bgs %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(comp_full)) %>%
st_drop_geometry() %>%
group_by(Name = comp_full) %>%
filter(!is.na(Name)) %>%
summarize(Population = sum(pop_2018)
) %>%
arrange(desc(Population))
datatable(temp, caption = "New York, Sources: ACS 2019 and HUD CHAS")%>%
formatCurrency('Population',currency = "", interval = 3, mark = ",")
temp <- dac_bgs %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(comp_full)) %>%
st_drop_geometry() %>%
group_by(Name = comp_full) %>%
filter(!is.na(Name)) %>%
summarize(Population = sum(pop_2018)
) %>%
arrange(desc(Population))
datatable(temp, caption = "Interim Disadvantaged Communities (DAC) Population by Utiliy Zone")%>%
formatCurrency('Population',currency = "", interval = 3, mark = ",")

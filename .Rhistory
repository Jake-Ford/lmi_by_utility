# st_drop_geometry()
temp <- temp_util %>%
select(OBJECTID, geometry)
env_df <- st_read("/Users/jacobford/Downloads/calenviroscreen40shpf2021shp/CES4 Final Shapefile.shp")
env_df <- st_transform(env_df, crs = st_crs(ca_tracts))
ca_geo_qual <- st_read("data/CA/Low-income_or_Disadvantaged_Communities_Designated_by_California/Low-income_or_Disadvantaged_Communities_Designated_by_California.shp")
ca_geo_qual <- st_transform(ca_geo_qual, crs = st_crs(ca_tracts))
pal5 <- colorFactor(
palette="viridis",
domain=temp_util$Type
)
# Create the leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = temp_util,
group = "Utility Zones",
stroke = FALSE,
color = ~pal5(temp_util$Type),
dashArray = "3",
fillOpacity = 0.5,
popup = paste("Utility Zone: ", temp_util$Acronym, "<br>",
"Utility Name: ", temp_util$Utility)) %>%
addLegend(position = "bottomright",
pal = pal5,
group = "Utility Zones",
values = temp_util$Type,
title = "California Utilities")
pal5 <- colorFactor(
palette="viridis",
domain=temp_util$Acronym
)
# Create the leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = temp_util,
group = "Utility Zones",
stroke = FALSE,
color = ~pal5(temp_util$Acronym),
dashArray = "3",
fillOpacity = 0.5,
popup = paste("Utility Zone: ", temp_util$Acronym, "<br>",
"Utility Name: ", temp_util$Utility)) %>%
addLegend(position = "bottomright",
pal = pal5,
group = "Utility Zones",
values = temp_util$Acronym,
title = "California Utilities")
temp <- ca_tracts %>%
st_drop_geometry()
temp <- merge(temp, ca_geo_qual, by = c("GEOID"))
temp <- st_as_sf(temp)
temp$Population <- temp$estimate
temp_table <- temp %>%
st_drop_geometry() %>%
mutate(var = 1) %>%
group_by(var) %>%
summarize(Population = sum(Population)) %>%
select(`Population Geoqualified` = Population ) %>%
mutate(`Population Total` = sum(ca_tracts$estimate))
datatable(temp_table, caption = "California Geoqualified Population") %>%
formatCurrency('Population Geoqualified',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Population Total',currency = "", interval = 3, mark = ",")
tot_ca_pop <- sum(ca_tracts$estimate)
iou_utils <- temp_util %>%
filter(Type=="IOU") %>%
st_make_valid()
temp_table <- temp %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(iou_utils %>% select(Utility=Acronym)) %>%
st_drop_geometry() %>%
group_by(Utility) %>%
summarize(Population = sum(Population)) %>%
mutate(Percentage = Population/tot_ca_pop) %>%
adorn_totals("row")
#
# temp <- ca_tracts %>%
#   st_point_on_surface() %>%
#   st_make_valid() %>%
#   st_join(ca_geo_qual %>% select(GEOID)) %>%
#   st_drop_geometry() %>%
#   filter(!is.na(GEOID.y)) %>%
#   mutate(var = 1) %>%
#   group_by(var) %>%
#
#   summarize(Population = sum(estimate)
#             ) %>%
#   arrange(desc(Population)) %>%
#   adorn_totals("row") %>%
#   mutate(Percentage = Population / tot_ca_pop )
datatable(temp_table, caption = "California Geoqualified Population by Utiliy Zone")%>%
formatCurrency('Population',currency = "", interval = 3, mark = ",") %>%
formatPercentage('Percentage', digits = 2)
temp_df <- add_geo %>%
filter(State_Name == "California")
temp_lift <- lift_df %>%
filter(State == "California")
pal_potLMI <- colorNumeric(
palette = "viridis",
# reverse=TRUE,
domain = temp_lift$Potential...LMI.Subscribers)
pal_cap <- colorNumeric(
palette = "viridis",
# reverse=TRUE,
domain = temp_lift$Project.Capacity.KW.AC)
pal <- colorNumeric(
palette = "viridis",
# reverse=TRUE,
domain = temp_df$AMI_80)
pal2 <- colorNumeric(
palette = "Purples",
# reverse=TRUE,
domain = temp_df$AMI_80_Pct)
pal3 <- colorNumeric(
palette = "viridis",
# reverse=TRUE,
domain = total_ny_tracts$snap_hh)
library(tidyr)
temp_lift <- lift_df %>%
filter(State=="New York")
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data=temp_util,
group="Utility Zones",
stroke=TRUE,
color="black",
dashArray="3",
fillOpacity=0,
popup=paste("Utility Zone: ", temp_util$comp_short)
) %>%
addPolygons(
data = temp_df,
group="80% AMI",  # This should be consistent with the group name in the addLegend function
stroke=FALSE,
smoothFactor=0.2,
fillOpacity=0.85,
color=~pal(AMI_80),
popup=paste("Tract: ", temp_df$geoid, "<br>",
"HHs at 80% AMI: ", temp_df$AMI_80)
) %>%
addLegend("bottomleft",
group="80% AMI",  # This should be consistent with the group name in the addPolygons function
pal = pal,
values = temp_df$AMI_80,
title="Number of HHs at 80% AMI"
) %>%
# addPolygons(
#   data=nm_df,
#   group="80% AMI Percent",  # This should be consistent with the group name in the addLegend function
#   stroke=FALSE,
#   smoothFactor=0.2,
#   fillOpacity=0.7,
#   color=~pal2(AMI_80_Pct),
#   popup=paste("Tract: ", nm_df$geoid, "<br>",
#               "Percent of HHs at 80% AMI: ", nm_df$AMI_80_Pct)
# ) %>%
#
# addLegend("bottomleft",
#           group="80% AMI Percent",  # This should be consistent with the group name in the addPolygons function
#           pal = pal2,
#           values = nm_df$AMI_80_Pct,
#           title="Percent of HHs at 80% AMI"
# ) %>%
addPolygons(
data=total_ny_tracts,
group="SNAP",
stroke=FALSE,
smoothFactor=0.2,
fillOpacity=0.7,
color=~pal3(snap_hh),
popup=paste("Tract: ", total_ny_tracts$GEOID, "<br>",
"Number of HHs Receiving SNAP: ", total_ny_tracts$snap_hh)
) %>%
addLegend("bottomleft",
group="SNAP",
pal = pal3,
values = total_ny_tracts$snap_hh,
title="Number of HHs Receiving SNAP:"
) %>%
addCircleMarkers(data = temp_lift,
group="Potential LMI Subscribers",
popup = ~paste("Program Name: ", Program.Name, "<br>",
"Developer/Owner: ", Project.Developer.or.Owner, "<br>",
"Project Capacity: ", Project.Capacity.KW.AC, "<br>",
"LMI Savings: ", LMI.Customer.Savings.., "<br>",
"Potential LMI Subscribers: ", Potential...LMI.Subscribers),
radius = temp_lift$Potential...LMI.Subscribers/15,
color = ~pal_potLMI(Potential...LMI.Subscribers)) %>%
addLegend("bottomright",
group="Potential LMI Subscribers",  # This should be consistent with the group name in the addPolygons function
pal = pal_potLMI,
values = temp_lift$Potential...LMI.Subscribers,
title="Potential LMI Subscribers") %>%
## Project Capacity ##
addCircleMarkers(data = temp_lift,
group="Project Capacity",
popup = ~paste("Program Name: ", Program.Name, "<br>",
"Developer/Owner: ", Project.Developer.or.Owner, "<br>",
"Project Capacity: ", Project.Capacity.KW.AC, "<br>",
"LMI Savings: ", LMI.Customer.Savings.., "<br>",
"Potential LMI Subscribers: ", Potential...LMI.Subscribers),
radius = temp_lift$Project.Capacity.KW.AC/100,
color = ~pal_cap(Project.Capacity.KW.AC)) %>%
addLegend("topleft",
group="Project Capacity",  # This should be consistent with the group name in the addPolygons function
pal = pal_cap,
values = temp_lift$Project.Capacity.KW.AC,
title="Project Capacity") %>%
addLayersControl(
overlayGroups=c( "80% AMI", "Utility Zones", "SNAP","Potential LMI Subscribers", "Project Capacity"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
)
map %>%
hideGroup("SNAP") %>% hideGroup("80% AMI") %>% hideGroup("Project Capacity")
state_list <- c("IL", "MA", "MN", "NJ", "NM", "NY",  "CA")
temp_util <- hifld_df %>%
filter(ID %in% c(56697, 4110,12341)) %>%
mutate(new_name = case_when(
ID == 56697 ~ "Ameren",
ID == 4110 ~ "ComEd",
ID == 12341 ~ "MidAmerican"
))
get_tracts <- get_acs(
geography="tract",
state=state_list,
variables=c("total_pop" = "B01001_001"),
year=2019,
geometry=TRUE) %>%
mutate(total_pop = estimate) %>%
select(geoid=GEOID, geometry, total_pop)
chas_df <- load_chas() %>%
mutate(State_Name = case_when(
state == 17 ~ "Illinois",
state == 25 ~ "Massachusetts",
state == 27 ~ "Minnesota",
state == 34 ~ "New Jersey",
state == 35 ~ "New Mexico",
state == 36 ~ "New York",
state == 06 ~ "California",
TRUE ~ "Other"
))
il_counties <- get_acs(geography="county",
variables = c(totapop = "B01003_001"),
state = "IL",
year = 2021,
geometry = TRUE)
add_geo <- merge(chas_df, get_tracts)
add_geo <- st_as_sf(add_geo)
il_geo <- add_geo %>%
filter(State_Name=="Illinois")
temp_util <- st_transform(temp_util, st_crs(il_geo)) %>%
st_make_valid()
pal5 <- colorFactor(
palette="viridis",
domain=temp_util$new_name
)
il_counties <- il_counties %>%
filter(GEOID == 17073 | GEOID == 17131)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data=temp_util,
group="Utility Zones",
stroke=TRUE,
color=~pal5(temp_util$new_name),
dashArray="3",
fillOpacity=0.25,
popup=paste("Utility Zone: ", temp_util$new_name)) %>%
addLegend(position="bottomright",
pal=pal5,
values=temp_util$new_name,
title="Solstice IL Utilities") %>%
addPolygons(data=il_counties,
stroke=TRUE,
color="black",
dashArray="3",
group="Counties",
fillOpacity=0,
popup=paste("Utility Zone: ", il_counties$NAME)) %>%
# addPolygons(data = il_tracts,
#             color = "red",
#             fillOpacity = .5,
#             popup=paste("GEOID: ", il_tracts$geoid)) %>%
addLayersControl(
overlayGroups=c( "Counties", "Utility Zones"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
)
# Specify the variables you're interested in
vars <- c("B01003_001",# total population
"B11001_001", # total households
"B25003_001" # total occupied households
)
# Retrieve population data for Mercer County, Illinois
mercer_data <- get_decennial(
geography = "block",
variables = c("total_pop" = "P1_001N",
"total_hh" = "H1_001N",
"total_occ_hh" = "H1_002N"),
state = "IL",
county = c("131"),
year = 2020,
geometry = TRUE
) %>%
group_by(GEOID) %>%
summarize(
total_pop = value[variable == "total_pop"],
total_hh = value[variable == "total_hh"],
total_occ_hh = value[variable == "total_occ_hh"]
)
# Retrieve population data for Henry County, Illinois
henry_data <- get_decennial(
geography = "block",
variables = c("total_pop" = "P1_001N",
"total_hh" = "H1_001N",
"total_occ_hh" = "H1_002N"),
state = "IL",
county = c("073"),
year = 2020,
geometry = TRUE
) %>%
group_by(GEOID) %>%
summarize(
total_pop = value[variable == "total_pop"],
total_hh = value[variable == "total_hh"],
total_occ_hh = value[variable == "total_occ_hh"]
)
## Mercer Demographic Table
total_hh <- sum(mercer_data$total_hh)
temp <- mercer_data %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(NAME)) %>%
st_drop_geometry() %>%
group_by(Name = NAME) %>%
filter(!is.na(Name)) %>%
summarize(`Total HH` = sum(total_hh),
`Total Occupied HH` = sum(total_occ_hh),
`Total Population` = sum(total_pop)) %>%
adorn_totals("row") %>%
mutate('Total HH Pct' = `Total HH` / sum(mercer_data$total_hh),
'Total HH Occupied Pct' = `Total Occupied HH` / sum(mercer_data$total_occ_hh) ,
'Total Population Pct' = `Total Population` / sum(mercer_data$total_pop) )
datatable(temp, caption = "Mercer County, Sources: ACS 2019 and HUD CHAS")%>%
formatCurrency('Total HH', currency = "", mark = ",", interval = 3, digits = 0) %>%
formatCurrency('Total Occupied HH', currency = "", mark = ",", interval = 3, digits = 0) %>%
formatCurrency('Total Population', currency = "", mark = ",", interval = 3, digits = 0) %>%
formatPercentage('Total HH Pct',digits=2, interval = 3) %>%
formatPercentage('Total HH Occupied Pct',digits=2, interval = 3) %>%
formatPercentage('Total Population Pct',digits=2, interval = 3)
## Henry Demographic Table
temp <- henry_data %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(NAME),st_nn, k = 1)  %>%
# st_join(temp_util %>% select(NAME)) %>%
st_drop_geometry()
# Count the occurrences of each geoid in the result
geoid_counts <- temp %>%
group_by(GEOID) %>%
summarise(tag_count = n_distinct(NAME))
# Update the "Name" attribute based on the conditions
temp <- temp %>%
left_join(geoid_counts, by = "GEOID") %>%
mutate(NAME = ifelse(tag_count > 1, "AMEREN ILLINOIS COMPANY", NAME)) %>%
select(-tag_count) %>%
group_by(GEOID, NAME) %>%
summarize(`Total HH` = max(total_hh),
`Total Occupied HH` = max(total_occ_hh),
`Total Population` = max(total_pop)) %>%
group_by(NAME) %>%
summarize(`Total HH` = sum(`Total HH`),
`Total Occupied HH` = sum(`Total Occupied HH`),
`Total Population` = sum(`Total Population`)) %>%
adorn_totals("row") %>%
mutate('Total HH Pct' = `Total HH` / sum(henry_data$total_hh),
'Total HH Occupied Pct' = `Total Occupied HH` / sum(henry_data$total_occ_hh) ,
'Total Population Pct' = `Total Population` / sum(henry_data$total_pop) )
datatable(temp, caption = "Henry County, Sources: ACS 2019 and HUD CHAS") %>%
formatCurrency('Total HH', currency = "", mark = ",", interval = 3, digits = 0) %>%
formatCurrency('Total Occupied HH', currency = "", mark = ",", interval = 3, digits = 0) %>%
formatCurrency('Total Population', currency = "", mark = ",", interval = 3, digits = 0) %>%
formatPercentage('Total HH Pct', digits = 2, interval = 3) %>%
formatPercentage('Total HH Occupied Pct', digits = 2, interval = 3) %>%
formatPercentage('Total Population Pct', digits = 2, interval = 3)
get_tracts <- get_acs(
geography="tract",
state="IL",
county = c("131"),
variables=c("total_pop" = "B01001_001"),
year=2019,
geometry=TRUE) %>%
mutate(total_pop = estimate) %>%
select(geoid=GEOID, geometry, total_pop)
# Specify the variables you're interested in
vars <- c("B01003_001",# total population
"B11001_001", # total households
"B25003_001" # total occupied households
)
# Retrieve population data for Mercer County, Illinois
total_data <- get_acs(
geography = "tract",
variables = c("total_pop" = "B01001_001"),
state = "IL",
county  = c("131", "073"),
year = 2019,
geometry = TRUE
) %>%
group_by(geoid=GEOID, NAME) %>%
summarize(
total_pop = estimate
)
# combine with HUD CHAS data
temp <- il_geo %>%
filter(geoid %in% total_data$geoid)
temp_util <- temp_util %>%
filter(NAME == "AMEREN ILLINOIS COMPANY")
temp <- temp %>%
st_make_valid()
temp_util <- temp_util %>%
st_make_valid()
temp$total_area_tract <- st_area(temp)
# Find the intersection of valid_iso_15 with total_nm_tracts
intersecting_tracts <- st_intersection(temp, temp_util)
# Calculate the area of valid_iso_15 that covers each tract
intersecting_tracts$covered_area <- st_area(intersecting_tracts)
temp <- temp %>%
filter(geoid %in% intersecting_tracts$geoid)
# Calculate the proportion of coverage for each tract
intersecting_tracts$proportion_coverage <- (intersecting_tracts$covered_area / temp$total_area_tract)
# If you want to consider the 'snap' column for calculating the proportion
# You can adjust the calculation based on your needs
intersecting_tracts$proportion_80ami_coverage <- intersecting_tracts$proportion_coverage * intersecting_tracts$AMI_80
intersecting_tracts$proportion_total_pop <- intersecting_tracts$proportion_coverage * intersecting_tracts$total_pop
temp <- intersecting_tracts %>%
st_drop_geometry() %>%
group_by(geoid, name) %>%
summarize(
total_80ami = max(AMI_80),
covered_area = sum(proportion_coverage),
total_pop = max(total_pop)) %>%
mutate(covered_prop =
case_when(
as.numeric(covered_area) >= 100 ~ 1,
TRUE ~ as.numeric(covered_area))
) %>%
mutate(
proportion_80ami = covered_prop * total_80ami,
proportion_total_pop = covered_prop * total_pop,
total_pop = total_pop
) %>%
group_by(name) %>%
summarize(
LMI = sum(proportion_80ami),
Total_Covered_Pop = sum(proportion_total_pop),
Total_Pop = sum(total_pop))%>%
mutate(County = case_when(
grepl("Henry", name) ~ "Henry",
grepl("Mercer", name) ~ "Mercer"
)) %>%
group_by(County) %>%
summarize(LMI = round(sum(LMI),0),
Total_Covered_Pop = round(sum(Total_Covered_Pop),0),
Total_Pop = round(sum(Total_Pop),0)) %>%
adorn_totals("row")
datatable(temp, caption = "Henry and Mercer 80% AMI LMI Population, Sources: ACS 2019 and HUD CHAS")%>%
formatCurrency('LMI',currency = "", interval = 3, mark = ",", digits = 0) %>%
formatCurrency('Total_Covered_Pop',currency = "", interval = 3, mark = ",", digits = 0) %>%
formatCurrency('Total_Pop',currency = "", interval = 3, mark = ",", digits = 0)
hifld_df <- st_read("utility_zones/HIFLD/Electric_Retail_Service_Territories (1)/Electric_Retail_Service_Territories.shp")
View(hifld_df)
temp_util <- hifld_df %>%
filter(STATE == "DE")
View(temp_util)
mapview(temp_util)
state_list
state_list <- c("IL", "MA", "MN", "NJ", "NM", "NY",  "CA", "DE")
get_tracts <- get_acs(
geography="tract",
state=state_list,
variables=c("Median Income" = "S1901_C01_012E"),
year=2019,
geometry=TRUE) %>%
mutate(MedInc = estimate) %>%
select(geoid=GEOID, geometry)
chas_df <- load_chas() %>%
mutate(State_Name = case_when(
state == 17 ~ "Illinois",
state == 25 ~ "Massachusetts",
state == 27 ~ "Minnesota",
state == 34 ~ "New Jersey",
state == 35 ~ "New Mexico",
state == 36 ~ "New York",
state == 6 ~ "California",
state == 10 ~ "Delaware",
TRUE ~ "Other"
))
add_geo <- merge(chas_df, get_tracts)
state_list
length(state_list)
chas_df <- load_chas() %>%
mutate(State_Name = case_when(
state == 17 ~ "Illinois",
state == 25 ~ "Massachusetts",
state == 27 ~ "Minnesota",
state == 34 ~ "New Jersey",
state == 35 ~ "New Mexico",
state == 36 ~ "New York",
state == 6 ~ "California",
state == 10 ~ "Delaware",
TRUE ~ "Other"
))
View(chas_df)
table(chas_df$state)

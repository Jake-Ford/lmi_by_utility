nm_geo <- add_geo %>%
filter(State_Name=="New Mexico")
temp_util <- st_transform(temp_util, st_crs(nm_geo)) %>%
st_make_valid()
View(chas_df)
print("hello world")
#  * NYSERDA [Supported Solar Projects](https://www.nyserda.ny.gov/All-Programs/NY-Sun/Solar-Data-Maps/NYSERDA-Supported-Solar-Projects)
ny_geo <- add_geo %>%
filter(State_Name=="New York")
#Load packages we'll need throughout the entire document
library(readxl)
library(data.table)
library(DT)
library(sf)
library(mapview)
library(dplyr)
library(scales)
library(tidycensus)
library(tidyverse)
options(tigris_use_cache = TRUE)
library(nngeo)
library(leaflet)
library(janitor)
library(DT)
library(kableExtra)
library(ggmap)
source('helper_functions.R')
library(RColorBrewer)
library(tidyr)
options(scipen = 100)
state_list <- c("IL", "MA", "MN", "NJ", "NM", "NY",  "CA")
hifld_df <- st_read("utility_zones/HIFLD/Electric_Retail_Service_Territories (1)/Electric_Retail_Service_Territories.shp")
temp_util <- hifld_df %>%
filter(ID %in% c(15473, 10817, 5701)) %>%
mutate(new_name = case_when(
ID == 15473 ~ "Public Service Company",
ID == 10817 ~ "Xcel",
ID == 5701 ~ "El Paso Electric"
))
census_api_key('ba3d95cae3658f3145daf7f66119ed58a52aaca3')
get_tracts <- get_acs(
geography="tract",
state=state_list,
variables=c("Median Income" = "S1901_C01_012E"),
year=2017,
geometry=TRUE) %>%
mutate(MedInc = estimate) %>%
select(geoid=GEOID, geometry)
chas_df <- load_chas() %>%
mutate(State_Name = case_when(
state == 17 ~ "Illinois",
state == 25 ~ "Massachusetts",
state == 27 ~ "Minnesota",
state == 34 ~ "New Jersey",
state == 35 ~ "New Mexico",
state == 36 ~ "New York",
state == 06 ~ "California",
TRUE ~ "Other"
))
add_geo <- merge(chas_df, get_tracts)
add_geo <- st_as_sf(add_geo)
nm_geo <- add_geo %>%
filter(State_Name=="New Mexico")
temp_util <- st_transform(temp_util, st_crs(nm_geo)) %>%
st_make_valid()
pal5 <- colorFactor(
palette="viridis",
domain=temp_util$new_name
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data=temp_util,
group="Utility Zones",
stroke=TRUE,
color=~pal5(temp_util$new_name),
dashArray="3",
fillOpacity=0.5,
popup=paste("Utility Zone: ", temp_util$new_name)) %>%
addLegend(position="bottomright",
pal=pal5,
values=temp_util$new_name,
title="Solstice NM Utilities")
# * Medicaid
#   - total count of population with Medicaid- C27007_004 + C27007_007 + C27007_010 + C27007_014 + C27007_017 + C27007_020
#   - geo: tract
#
# * SNAP
#   - total count of HH received Food Stamps/SNAP in last 12 months - B22001_002
#   - total count of population received Food Stamps/SNAP in last 12 months - B19058_002
#   - geo: tract
# * LIHEAP
#   - use this to calculate income by self attestation?
#   https://www.acf.hhs.gov/sites/default/files/documents/ocs/comm_liheap_im2002smiattachment_fy2021.pdf
#
# * first-time home owner programs
# * affordable housing facilities
#   - HUD data: https://resources.hud.gov/#layers-menu
#   - state specific to supplement: https://housingnm.org/find-housing/rentals/affordable
# * low-income housing
# * state and federal income tax credit
# * entire multi-family housing project may qualify if the entire load can be proved to be low-income subscribers, with consent of all tenants of record.
#
# LMI - 80% of AMI from HUD..
# acs_vars <- load_variables(2019, "acs5")
nm_blocks <- get_acs(
geography="tract",
state="NM",
variables=c("snap_hh" = "B22001_002",
"snap_pop" = "B19058_002",
"medicaid_1" = "C27007_004",
"medicaid_2" = "C27007_007",
"medicaid_3" = "C27007_010",
"medicaid_4" = "C27007_014",
"medicaid_5" = "C27007_017",
"medicaid_6" = "C27007_020",
"Total_Pop" = "B01001_001"
),
year=2019,
geometry=TRUE) %>%
group_by(GEOID) %>%
summarize(snap_hh = estimate[variable=="snap_hh"],
medicaid_pop =estimate[variable=="medicaid_1"] +
estimate[variable=="medicaid_2"] +
estimate[variable=="medicaid_3"] +
estimate[variable=="medicaid_4"] +
estimate[variable=="medicaid_5"] +
estimate[variable=="medicaid_6"] ,
total_pop = estimate[variable=="Total_Pop"])
total_nm_tracts <- cbind(nm_geo, nm_blocks)
temp <- total_nm_tracts %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(NAME)) %>%
st_drop_geometry() %>%
group_by(Name = NAME) %>%
filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80),
`Medicaid` = sum(medicaid_pop),
`SNAP HH` = sum(snap_hh),
`Total Population` = sum(total_pop)) %>%
arrange(desc(`Pop under 80 AMI`))
datatable(temp, caption = "New Mexico, Sources: ACS 2019 and HUD CHAS")%>%
formatCurrency('Pop under 80 AMI',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Medicaid',currency = "", interval = 3, mark = ",") %>%
formatCurrency('SNAP HH',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Total Population',currency = "", interval = 3, mark = ",")
nm_df <- add_geo %>%
filter(State_Name == "New Mexico")
pal <- colorNumeric(
palette = "Reds",
# reverse=TRUE,
domain = nm_df$AMI_80)
pal2 <- colorNumeric(
palette = "Purples",
# reverse=TRUE,
domain = nm_df$AMI_80_Pct)
pal3 <- colorNumeric(
palette = "Greens",
# reverse=TRUE,
domain = nm_blocks$snap_hh)
pal4 <- colorNumeric(
palette = "Blues",
# reverse=TRUE,
domain = nm_blocks$medicaid_pop)
map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data=temp_util,
group="Utility Zones",
stroke=TRUE,
color="black",
dashArray="3",
fillOpacity=0,
popup=paste("Utility Zone: ", temp_util$new_name)
) %>%
addPolygons(
data = nm_df,
group="80% AMI",  # This should be consistent with the group name in the addLegend function
stroke=FALSE,
smoothFactor=0.2,
fillOpacity=0.7,
color=~pal(AMI_80),
popup=paste("Tract: ", nm_df$geoid, "<br>",
"HHs at 80% AMI: ", nm_df$AMI_80)
) %>%
addLegend("bottomleft",
group="80% AMI",  # This should be consistent with the group name in the addPolygons function
pal = pal,
values = nm_df$AMI_80,
title="Number of HHs at 80% AMI"
) %>%
# addPolygons(
#   data=nm_df,
#   group="80% AMI Percent",  # This should be consistent with the group name in the addLegend function
#   stroke=FALSE,
#   smoothFactor=0.2,
#   fillOpacity=0.7,
#   color=~pal2(AMI_80_Pct),
#   popup=paste("Tract: ", nm_df$geoid, "<br>",
#               "Percent of HHs at 80% AMI: ", nm_df$AMI_80_Pct)
# ) %>%
#
# addLegend("bottomleft",
#           group="80% AMI Percent",  # This should be consistent with the group name in the addPolygons function
#           pal = pal2,
#           values = nm_df$AMI_80_Pct,
#           title="Percent of HHs at 80% AMI"
# ) %>%
addPolygons(
data=nm_blocks,
group="SNAP",
stroke=FALSE,
smoothFactor=0.2,
fillOpacity=0.7,
color=~pal3(snap_hh),
popup=paste("Tract: ", nm_blocks$GEOID, "<br>",
"Number of HHs Receiving SNAP: ", nm_blocks$snap_hh)
) %>%
addLegend("bottomleft",
group="SNAP",
pal = pal3,
values = nm_blocks$snap_hh,
title="Number of HHs Receiving SNAP:"
) %>%
addPolygons(
data=nm_blocks,
group="Medicaid",
stroke=FALSE,
smoothFactor=0.2,
fillOpacity=0.7,
color=~pal4(medicaid_pop),
popup=paste("Tract: ", nm_blocks$GEOID, "<br>",
"Number of HHs Receiving Medicaid: ", nm_blocks$medicaid_pop)
) %>%
addLegend("bottomleft",
group="Medicaid",
pal = pal4,
values = nm_blocks$medicaid_pop,
title="Number of HHs Receiving Medicaid:"
) %>%
addLayersControl(
overlayGroups=c( "80% AMI", "Utility Zones", "SNAP", "Medicaid"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
)
map %>%
hideGroup("SNAP") %>% hideGroup("80% AMI") %>% hideGroup("Medicaid")
# nm_data <- read_excel("data/nm/nm_public_housing.xlsx")
#
#
#
# library(ggmap)
#
# # Assuming your 'nm_data' dataframe has columns 'Address' and 'Address 2'
# # Create a new column to store the full address (combining Address and Address 2)
# nm_data$full_address <- paste(nm_data$Address, nm_data$`Address 2`, sep = ", ")
#
# # Use geocode() to get latitude and longitude for each address
# geocoded_data <- geocode(nm_data$full_address)
#
# # Add latitude and longitude columns to the original dataframe
# nm_data$Latitude <- geocoded_data$lat
# nm_data$Longitude <- geocoded_data$lon
#
# nm_data <- nm_data %>%?
#   filter(!is.na(Longitude))
#
# nm_data <- st_as_sf(nm_data, coords = c("Longitude", "Latitude"), crs = st_crs(nm_blocks))
# st_write(nm_data, "nm_public_housing.shp")
nm_public_housing <- st_read("data/nm/nm_public_housing.shp")
# nm_public_housing_isos <- nm_public_housing %>%
#   mb_isochrone(time = 30, profile = "driving", id_column = "Name",
#                access_token = "blahblahblah"
nm_public_housing_isos_15 <- st_read("isochrones/nm_public_housing_isos_15.shp")
nm_public_housing_isos_15 <- st_transform(nm_public_housing_isos_15, st_crs(nm_public_housing))
nm_public_housing_isos_30 <- st_read("isochrones/nm_public_housing_isos_30.shp")
nm_public_housing_isos_30 <- st_transform(nm_public_housing_isos_30, st_crs(nm_public_housing))
library(leaflet.extras)
nm_pub_in_util <- nm_public_housing %>%
st_point_on_surface() %>%
st_join(temp_util %>% select(util_name = NAME)) %>%
filter(!is.na(util_name))
houses_in_utilies <- nm_pub_in_util$Name
iso_15 <- nm_public_housing_isos_15 %>%
filter(id %in% houses_in_utilies)
iso_30 <- nm_public_housing_isos_30 %>%
filter(id %in% houses_in_utilies)
map %>%
# addMarkers(data=nm_public_housing,
#                  group="Public Housing",
#               #   color="black",
#               #   radius=2,
#                  popup=paste("Name: ", nm_public_housing$Name)) %>%
addMarkers(data = nm_pub_in_util,
group="Public Housing",
#  color="red",
popup=paste("Name: ", nm_pub_in_util$util_name)) %>%
addPolygons(data =iso_15,
group = "15 Minute Driving",
fillOpacity = 0.2,
color = "orange") %>%
addPolygons(data =iso_30,
group = "30 Minute Driving",
fillOpacity = 0.2,
color = "darkgreen") %>%
addLayersControl(
overlayGroups=c("80% AMI", "Utility Zones", "SNAP", "Medicaid", "Public Housing", "15 Minute Driving", "30 Minute Driving"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("80% AMI Percent") %>% hideGroup("SNAP") %>% hideGroup("80% AMI") %>% hideGroup("Medicaid")
# Assuming 'snap' column is present in total_nm_tracts
# Check validity of isochrones
iso_15_valid <- st_is_valid(iso_15)
# Find indices of invalid isochrones
invalid_indices <- which(!iso_15_valid)
# Filter out invalid isochrones
valid_iso_15 <- iso_15[-invalid_indices, ]
total_nm_tracts$total_area_tract <- st_area(total_nm_tracts)
# Find the intersection of valid_iso_15 with total_nm_tracts
intersecting_tracts <- st_intersection(total_nm_tracts, valid_iso_15)
# Calculate the area of valid_iso_15 that covers each tract
intersecting_tracts$covered_area <- st_area(intersecting_tracts)
# Calculate the proportion of coverage for each tract
intersecting_tracts$proportion_coverage <- intersecting_tracts$covered_area / total_nm_tracts$total_area_tract
# If you want to consider the 'snap' column for calculating the proportion
# You can adjust the calculation based on your needs
intersecting_tracts$proportion_snap_coverage <- intersecting_tracts$proportion_coverage * intersecting_tracts$snap_hh
intersecting_tracts$proportion_medicaid_pop <- intersecting_tracts$proportion_coverage * intersecting_tracts$medicaid_pop
intersecting_tracts$proportion_80ami_coverage <- intersecting_tracts$proportion_coverage * intersecting_tracts$AMI_80
intersecting_tracts$proportion_total_pop <- intersecting_tracts$proportion_coverage * intersecting_tracts$total_pop
temp_15 <- intersecting_tracts %>%
st_drop_geometry() %>%
group_by(geoid) %>%
summarize(total_snap = max(snap_hh),
total_medicaid = max(medicaid_pop),
total_80ami = max(AMI_80),
covered_area = sum(proportion_coverage),
total_pop = max(total_pop)) %>%
mutate(covered_prop =
case_when(
as.numeric(covered_area) >= 100 ~ 1,
TRUE ~ as.numeric(covered_area))
) %>%
mutate(
proportion_snap = covered_prop * total_snap/100,
proportion_medicaid = covered_prop * total_medicaid/100,
proportion_80ami = covered_prop * total_80ami/100,
proportion_total_pop = covered_prop * total_pop/100,
isochrone = "15 Minute"
) %>%
group_by(isochrone) %>%
summarize(SNAP = sum(proportion_snap),
Medicaid = sum(proportion_medicaid),
LMI = sum(proportion_80ami),
Total_Pop = sum(proportion_total_pop))
temp_15
# Assuming 'snap' column is present in total_nm_tracts
# Check validity of isochrones
iso_30_valid <- st_is_valid(iso_30)
# Find indices of invalid isochrones
invalid_indices <- which(!iso_30_valid)
# Filter out invalid isochrones
valid_iso_30 <- iso_30[-invalid_indices, ]
total_nm_tracts$total_area_tract <- st_area(total_nm_tracts)
# Find the intersection of valid_iso_30 with total_nm_tracts
intersecting_tracts <- st_intersection(total_nm_tracts, iso_30)
# Calculate the area of valid_iso_30 that covers each tract
intersecting_tracts$covered_area <- st_area(intersecting_tracts)
# Calculate the proportion of coverage for each tract
intersecting_tracts$proportion_coverage <- intersecting_tracts$covered_area / total_nm_tracts$total_area_tract
# If you want to consider the 'snap' column for calculating the proportion
# You can adjust the calculation based on your needs
intersecting_tracts$proportion_snap_coverage <- intersecting_tracts$proportion_coverage * intersecting_tracts$snap_hh
intersecting_tracts$proportion_medicaid_pop <- intersecting_tracts$proportion_coverage * intersecting_tracts$medicaid_pop
intersecting_tracts$proportion_80ami_coverage <- intersecting_tracts$proportion_coverage * intersecting_tracts$AMI_80
intersecting_tracts$proportion_total_pop <- intersecting_tracts$proportion_coverage * intersecting_tracts$total_pop
temp_30 <- intersecting_tracts %>%
st_drop_geometry() %>%
group_by(geoid) %>%
summarize(total_snap = max(snap_hh),
total_medicaid = max(medicaid_pop),
total_80ami = max(AMI_80),
covered_area = sum(proportion_coverage),
total_pop = max(total_pop)) %>%
mutate(covered_prop =
case_when(
as.numeric(covered_area) >= 100 ~ 1,
TRUE ~ as.numeric(covered_area))
) %>%
mutate(
proportion_snap = covered_prop * total_snap/100,
proportion_medicaid = covered_prop * total_medicaid/100,
proportion_80ami = covered_prop * total_80ami/100,
proportion_total_pop = covered_prop * total_pop/100,
isochrone = "30 Minute"
) %>%
group_by(isochrone) %>%
summarize(SNAP = sum(proportion_snap),
Medicaid = sum(proportion_medicaid),
LMI = sum(proportion_80ami),
Total_Pop = sum(proportion_total_pop))
temp_30
temp <- rbind(temp_15, temp_30)
datatable(temp, caption = "New Mexico Distance from Public Housing and Selected Characteristics")%>%
formatCurrency('LMI',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Medicaid',currency = "", interval = 3, mark = ",") %>%
formatCurrency('SNAP',currency = "", interval = 3, mark = ",")  %>%
formatCurrency('Total_Pop', currency="", interval = 3, mark = ",")
#  * NYSERDA [Supported Solar Projects](https://www.nyserda.ny.gov/All-Programs/NY-Sun/Solar-Data-Maps/NYSERDA-Supported-Solar-Projects)
ny_geo <- add_geo %>%
filter(State_Name=="New York")
temp_util <- st_read("data/NY/ny_utils.shp") %>%
filter(grepl("NGRID|NYSEG|CHGE|RGE|ORU", comp_short))
dac_bgs <- st_read("data/NY/Interim Disadvantaged Communities (DAC)_ 2020/geo_export_ae5e9c30-45bc-4888-87dd-681a41d761d8.shp")
lift_df <- read.csv("data/groundswell_lift/cs-projects-2023-08-18.csv")
lift_df <- separate(lift_df, GeoCode, into = c("long", "lat"), sep = ",")
lift_df <- st_as_sf(lift_df, coords = c("long", "lat"), crs = st_crs(nm_blocks))
ny_tracts <- get_acs(
geography="tract",
state="NY",
variables=c("Total_Pop" = "B01001_001","snap_hh" = "B22001_002","snap_pop" = "B19058_002"
),
year=2019,
geometry=TRUE) %>%
group_by(GEOID) %>%
summarize(total_pop = estimate[variable=="Total_Pop"],
snap_hh = estimate[variable=="snap_hh"],
snap_pop = estimate[variable=="snap_pop"])
# ny_bgs <- get_acs(
#   geography="block group",
#   state="NY",
#   variables=c("Total_Pop" = "B01001_001"),
#   year=2019,
#   geometry=TRUE)
#
# lmi_data <- read_excel("data/NY/ny-lowmod-blockgroup.xls")
total_ny_tracts <- cbind(ny_geo, ny_tracts)
temp_util <- st_zm(temp_util, drop = TRUE)
pal5 <- colorFactor(
palette="viridis",
domain=temp_util$comp_full
)
# Create the leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = temp_util,
group = "Utility Zones",
stroke = TRUE,
color = ~pal5(temp_util$comp_full),
dashArray = "3",
fillOpacity = 0.5,
popup = paste("Utility Zone: ", temp_util$comp_full)) %>%
addLegend(position = "bottomright",
pal = pal5,
group = "Utility Zones",
values = temp_util$comp_full,
title = "Solstice NY Utilities") %>%
addPolygons(data = dac_bgs,
group="DAC",
popup = paste("Name: ", dac_bgs$geoid, "<br>",
"Pop 2018: ", dac_bgs$pop_2018)) %>%
addLayersControl(
overlayGroups=c( "Utility Zones", "DAC"),  # Update the order for consistency
options = layersControlOptions(collapsed = FALSE)
)
library(janitor)
dac_bgs <- st_transform(dac_bgs, st_crs(total_nm_tracts)) %>% st_make_valid()
tot_ny_pop <- sum(total_ny_tracts$total_pop)
temp <- dac_bgs %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(comp_full)) %>%
st_drop_geometry() %>%
group_by(Name = comp_full) %>%
filter(!is.na(Name)) %>%
summarize(Population = sum(pop_2018)
) %>%
arrange(desc(Population)) %>%
adorn_totals("row") %>%
mutate(Percentage = Population / tot_ny_pop )
datatable(temp, caption = "Interim Disadvantaged Communities (DAC) Population by Utiliy Zone")%>%
formatCurrency('Population',currency = "", interval = 3, mark = ",") %>%
formatPercentage('Percentage', digits = 2)
temp <- total_ny_tracts %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(comp_short)) %>%
st_drop_geometry() %>%
group_by(Name = comp_short) %>%
filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80),
`SNAP HH` = sum(snap_hh),
`Total Population` = sum(total_pop)) %>%
arrange(desc(`Pop under 80 AMI`))
datatable(temp, caption = "New York, Sources: ACS 2019 and HUD CHAS")%>%
formatCurrency('Pop under 80 AMI',currency = "", interval = 3, mark = ",") %>%
formatCurrency('SNAP HH',currency = "", interval = 3, mark = ",") %>%
formatCurrency('Total Population',currency = "", interval = 3, mark = ",")
temp <- total_ny_tracts %>%
st_point_on_surface() %>%
st_make_valid() %>%
st_join(temp_util %>% select(comp_short)) %>%
st_drop_geometry() %>%
group_by(Name = comp_short) %>%
filter(!is.na(Name)) %>%
summarize(`Pop under 80 AMI` = sum(AMI_80),
`SNAP HH` = sum(snap_hh),
`Total Population` = sum(total_pop)) %>%
arrange(desc(`Pop under 80 AMI`))
temp
# datatable(temp, caption = "New York, Sources: ACS 2019 and HUD CHAS")%>%
#   formatCurrency('Pop under 80 AMI',currency = "", interval = 3, mark = ",") %>%
#   formatCurrency('SNAP HH',currency = "", interval = 3, mark = ",") %>%
#   formatCurrency('Total Population',currency = "", interval = 3, mark = ",")
